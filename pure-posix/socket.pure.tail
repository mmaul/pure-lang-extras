
const posix::socket::SOCK_STREAM = 1;              /* Sequenced, reliable, connection-based
                                   byte streams.  */
const posix::socket::SOCK_DGRAM = 2;               /* Connectionless, unreliable datagrams
                                   of fixed maximum length.  */
const posix::socket::SOCK_RAW = 3;                 /* Raw protocol interface.  */
const posix::socket::SOCK_RDM = 4;                 /* Reliably-delivered messages.  */
const posix::socket::SOCK_SEQPACKET = 5;           /* Sequenced, reliable, connection-based,
                                   datagrams of fixed maximum length.  */
const posix::socket::SOCK_DCCP = 6;                /* Datagram Congestion Control Protocol.  */
const posix::socket::SOCK_PACKET = 10;             /* Linux specific way of getting packets
                                   at the dev level.  For writing rarp and
                                   other similar things on the user level. */
  /* Flags to be ORed into the type parameter of socket and socketpair and
     used for the flags parameter of paccept.  */

const posix::socket::SOCK_CLOEXEC = 02000000;      /* Atomically set close-on-exec flag for the
                                   new descriptor(s).  */
const posix::socket::SOCK_NONBLOCK = 04000;         /* Atomically mark descriptor(s) as
                                   non-blocking.  */

using ffi;

/*
typedef uint32_t in_addr_t;
struct in_addr
  {
    in_addr_t s_addr;
  };
*/
let posix::socket::in_addr =  struct_t (uint32_t);
/*
struct sockaddr_in
{
  short   sin_family; // must be AF_INET
  u_short sin_port;
  struct  in_addr sin_addr;
  char    sin_zero[8]; // Not used, must be zero
};
*/
let posix::socket::sockaddr_in =  struct_t( sint16_t, //sin_family  must be AF_INET 
                             uint16_t, //sin_port,
                             pointer_t //sin_addr for in_addr
			     char[8] //sin_zero  Not used, must be zero 
);

/*   :Name: ``make_sockaddr`` - create sockaddr structure 
     :Synopsis: ``make_sockaddr::pointer_t <family::int> <address::string> <port::int>``
     :Description: Creates the sockaddr stucture necessary 
                   for binding and using sockets. This is difficult to do in pure pure
                   so a c wrapper was created.
                   <family::int> is one of the address family constants. 
                   Address family constants are prefixed by AF.
                   <address::string> is a string represention of a IP address.
                   for server sockets this will be the IP address of the interface
                   you wish to bind to. To bind to all interfaces use ''*''
                   <port::int> is the port number to be used

                   The return value is an pointer to the sock_addr_in structure 

     :See Also: socket(2) */
extern void * pure_sockaddr (int family, char *address_str, int port)=make_sockaddr;

sockaddr family::int addr_str::string port::int = sentry free addr if ~null addr
when addr = pure_socket family addr_str port end;

/*   :Name: `` bind_socket`` - binds socket
     :Synopsis: ``bind_socket::pointer_t <sockfd::int> <address::pointer to sockaddr>``
     :Description: Binds socket to sockaddr sturcture
                   for binding and using sockets.
                   <sockfd::int> file descriptor returned from socket
                   <address::pointer to sockaddr> pointer returned from make sockaddr.
                   
                   The return value is an int success in indicated by a non negative result.

     :See Also: socket(2) bind(2) */
extern int pure_bind(int sockfd, void *address)=bind_socket;

extern int pure_connect(int sockfd, void *address)=connect_socket;

/*   :Name: `` accept_socket`` - accepts connections
     :Synopsis: ``accept_socket::int <sockfd::int> <address::pointer to sockaddr>``
     :Description: Accepts connction requests on socket bound to sockfd
                   
                   <sockfd::int> file descriptor returned from socket
                   <address::pointer to sockaddr> pointer returned from make sockaddr.
                   
                   The return value is on success a file descriptor for the connection.
                   On failure the value will be -1.

     :See Also: accept(2)  */
extern int pure_accept( int sockfd, void * address)=accept_socket;

