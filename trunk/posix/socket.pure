using "lib:posix/posix.so";
namespace posix; //using posix::posix;
/* ..
   
   ====================================================
   pure-posix-socket - POSIX Sockets Interface
   ====================================================
   
   :Authors: Mike Maul <mike.maul@gmail.com> 
   :License: GPL V3, see the accompanying COPYING file
   
   This wrapper exposes constants and libc socket functions 
   defined in sys/socket.h. Additionally wappers are provided
   for certain functions relying on C struts.
   
   For examples see the examples directory
   This extension is a work in progress. 
*/

namespace posix::socket;
/* /usr/include/sys/socket.h: */

namespace posix::socket;
const posix::socket::LITTLE_ENDIAN = 1234;
const posix::socket::BIG_ENDIAN = 4321;
const posix::socket::PDP_ENDIAN = 3412;
const posix::socket::BYTE_ORDER = 1234;
const posix::socket::FD_SETSIZE = 1024;
const posix::socket::NFDBITS = 8;
const posix::socket::UIO_MAXIOV = 1024;
const posix::socket::PF_UNSPEC = 0;
const posix::socket::PF_LOCAL = 1;
const posix::socket::PF_UNIX = 1;
const posix::socket::PF_FILE = 1;
const posix::socket::PF_INET = 2;
const posix::socket::PF_AX25 = 3;
const posix::socket::PF_IPX = 4;
const posix::socket::PF_APPLETALK = 5;
const posix::socket::PF_NETROM = 6;
const posix::socket::PF_BRIDGE = 7;
const posix::socket::PF_ATMPVC = 8;
const posix::socket::PF_X25 = 9;
const posix::socket::PF_INET6 = 10;
const posix::socket::PF_ROSE = 11;
const posix::socket::PF_DECnet = 12;
const posix::socket::PF_NETBEUI = 13;
const posix::socket::PF_SECURITY = 14;
const posix::socket::PF_KEY = 15;
const posix::socket::PF_NETLINK = 16;
const posix::socket::PF_ROUTE = 16;
const posix::socket::PF_PACKET = 17;
const posix::socket::PF_ASH = 18;
const posix::socket::PF_ECONET = 19;
const posix::socket::PF_ATMSVC = 20;
const posix::socket::PF_RDS = 21;
const posix::socket::PF_SNA = 22;
const posix::socket::PF_IRDA = 23;
const posix::socket::PF_PPPOX = 24;
const posix::socket::PF_WANPIPE = 25;
const posix::socket::PF_LLC = 26;
const posix::socket::PF_CAN = 29;
const posix::socket::PF_TIPC = 30;
const posix::socket::PF_BLUETOOTH = 31;
const posix::socket::PF_IUCV = 32;
const posix::socket::PF_RXRPC = 33;
const posix::socket::PF_ISDN = 34;
const posix::socket::PF_PHONET = 35;
const posix::socket::PF_MAX = 36;
const posix::socket::AF_UNSPEC = 0;
const posix::socket::AF_LOCAL = 1;
const posix::socket::AF_UNIX = 1;
const posix::socket::AF_FILE = 1;
const posix::socket::AF_INET = 2;
const posix::socket::AF_AX25 = 3;
const posix::socket::AF_IPX = 4;
const posix::socket::AF_APPLETALK = 5;
const posix::socket::AF_NETROM = 6;
const posix::socket::AF_BRIDGE = 7;
const posix::socket::AF_ATMPVC = 8;
const posix::socket::AF_X25 = 9;
const posix::socket::AF_INET6 = 10;
const posix::socket::AF_ROSE = 11;
const posix::socket::AF_DECnet = 12;
const posix::socket::AF_NETBEUI = 13;
const posix::socket::AF_SECURITY = 14;
const posix::socket::AF_KEY = 15;
const posix::socket::AF_NETLINK = 16;
const posix::socket::AF_ROUTE = 16;
const posix::socket::AF_PACKET = 17;
const posix::socket::AF_ASH = 18;
const posix::socket::AF_ECONET = 19;
const posix::socket::AF_ATMSVC = 20;
const posix::socket::AF_RDS = 21;
const posix::socket::AF_SNA = 22;
const posix::socket::AF_IRDA = 23;
const posix::socket::AF_PPPOX = 24;
const posix::socket::AF_WANPIPE = 25;
const posix::socket::AF_LLC = 26;
const posix::socket::AF_CAN = 29;
const posix::socket::AF_TIPC = 30;
const posix::socket::AF_BLUETOOTH = 31;
const posix::socket::AF_IUCV = 32;
const posix::socket::AF_RXRPC = 33;
const posix::socket::AF_ISDN = 34;
const posix::socket::AF_PHONET = 35;
const posix::socket::AF_MAX = 36;
const posix::socket::SOL_RAW = 255;
const posix::socket::SOL_DECNET = 261;
const posix::socket::SOL_X25 = 262;
const posix::socket::SOL_PACKET = 263;
const posix::socket::SOL_ATM = 264;
const posix::socket::SOL_AAL = 265;
const posix::socket::SOL_IRDA = 266;
const posix::socket::SOMAXCONN = 128;
const posix::socket::FIOSETOWN = 35073;
const posix::socket::SIOCSPGRP = 35074;
const posix::socket::FIOGETOWN = 35075;
const posix::socket::SIOCGPGRP = 35076;
const posix::socket::SIOCATMARK = 35077;
const posix::socket::SIOCGSTAMP = 35078;
const posix::socket::SIOCGSTAMPNS = 35079;
const posix::socket::SOL_SOCKET = 1;
const posix::socket::SO_DEBUG = 1;
const posix::socket::SO_REUSEADDR = 2;
const posix::socket::SO_TYPE = 3;
const posix::socket::SO_ERROR = 4;
const posix::socket::SO_DONTROUTE = 5;
const posix::socket::SO_BROADCAST = 6;
const posix::socket::SO_SNDBUF = 7;
const posix::socket::SO_RCVBUF = 8;
const posix::socket::SO_SNDBUFFORCE = 32;
const posix::socket::SO_RCVBUFFORCE = 33;
const posix::socket::SO_KEEPALIVE = 9;
const posix::socket::SO_OOBINLINE = 10;
const posix::socket::SO_NO_CHECK = 11;
const posix::socket::SO_PRIORITY = 12;
const posix::socket::SO_LINGER = 13;
const posix::socket::SO_BSDCOMPAT = 14;
const posix::socket::SO_PASSCRED = 16;
const posix::socket::SO_PEERCRED = 17;
const posix::socket::SO_RCVLOWAT = 18;
const posix::socket::SO_SNDLOWAT = 19;
const posix::socket::SO_RCVTIMEO = 20;
const posix::socket::SO_SNDTIMEO = 21;
const posix::socket::SO_SECURITY_AUTHENTICATION = 22;
const posix::socket::SO_SECURITY_ENCRYPTION_TRANSPORT = 23;
const posix::socket::SO_SECURITY_ENCRYPTION_NETWORK = 24;
const posix::socket::SO_BINDTODEVICE = 25;
const posix::socket::SO_ATTACH_FILTER = 26;
const posix::socket::SO_DETACH_FILTER = 27;
const posix::socket::SO_PEERNAME = 28;
const posix::socket::SO_TIMESTAMP = 29;
const posix::socket::SCM_TIMESTAMP = 29;
const posix::socket::SO_ACCEPTCONN = 30;
const posix::socket::SO_PEERSEC = 31;
const posix::socket::SO_PASSSEC = 34;
const posix::socket::SO_TIMESTAMPNS = 35;
const posix::socket::SCM_TIMESTAMPNS = 35;
const posix::socket::SO_MARK = 36;
const posix::socket::SO_TIMESTAMPING = 37;
const posix::socket::SCM_TIMESTAMPING = 37;
extern int select(int, fd_set*, fd_set*, fd_set*, void/*struct timeval*/*);
extern int pselect(int, fd_set*, fd_set*, fd_set*, void/*struct timespec*/*, __sigset_t*);
extern int gnu_dev_major(int64);
extern int gnu_dev_minor(int64);
extern int64 gnu_dev_makedev(int, int);
extern int readv(int, void/*struct iovec*/*, int);
extern int writev(int, void/*struct iovec*/*, int);
extern int preadv(int, void/*struct iovec*/*, int, long);
extern int pwritev(int, void/*struct iovec*/*, int, long);
extern int socket(int, int, int);
extern int socketpair(int, int, int, int*);
extern int bind(int, void/*struct sockaddr*/*, int);
extern int getsockname(int, void/*struct sockaddr*/*, int*);
extern int connect(int, void/*struct sockaddr*/*, int);
extern int getpeername(int, void/*struct sockaddr*/*, int*);
extern int send(int, void*, int, int);
extern int recv(int, void*, int, int);
extern int sendto(int, void*, int, int, void/*struct sockaddr*/*, int);
extern int recvfrom(int, void*, int, int, void/*struct sockaddr*/*, int*);
extern int sendmsg(int, void/*struct msghdr*/*, int);
extern int recvmsg(int, void/*struct msghdr*/*, int);
extern int getsockopt(int, int, int, void*, int*);
extern int setsockopt(int, int, int, void*, int);
extern int listen(int, int);
extern int accept(int, void/*struct sockaddr*/*, int*);
extern int shutdown(int, int);
extern int sockatmark(int);
extern int isfdtype(int, int);

const posix::socket::SOCK_STREAM = 1;              /* Sequenced, reliable, connection-based
                                   byte streams.  */
const posix::socket::SOCK_DGRAM = 2;               /* Connectionless, unreliable datagrams
                                   of fixed maximum length.  */
const posix::socket::SOCK_RAW = 3;                 /* Raw protocol interface.  */
const posix::socket::SOCK_RDM = 4;                 /* Reliably-delivered messages.  */
const posix::socket::SOCK_SEQPACKET = 5;           /* Sequenced, reliable, connection-based,
                                   datagrams of fixed maximum length.  */
const posix::socket::SOCK_DCCP = 6;                /* Datagram Congestion Control Protocol.  */
const posix::socket::SOCK_PACKET = 10;             /* Linux specific way of getting packets
                                   at the dev level.  For writing rarp and
                                   other similar things on the user level. */
  /* Flags to be ORed into the type parameter of socket and socketpair and
     used for the flags parameter of paccept.  */

const posix::socket::SOCK_CLOEXEC = 02000000;      /* Atomically set close-on-exec flag for the
                                   new descriptor(s).  */
const posix::socket::SOCK_NONBLOCK = 04000;         /* Atomically mark descriptor(s) as
                                   non-blocking.  */

using ffi;

/*
typedef uint32_t in_addr_t;
struct in_addr
  {
    in_addr_t s_addr;
  };
*/
let posix::socket::in_addr =  struct_t (uint32_t);
/*
struct sockaddr_in
{
  short   sin_family; // must be AF_INET
  u_short sin_port;
  struct  in_addr sin_addr;
  char    sin_zero[8]; // Not used, must be zero
};
*/
let posix::socket::sockaddr_in =  struct_t( sint16_t, //sin_family  must be AF_INET 
                             uint16_t, //sin_port,
                             pointer_t //sin_addr for in_addr
			     char[8] //sin_zero  Not used, must be zero 
);

/*   :Name: ``make-sockaddr`` - create sockaddr structure 
     :Synopsis: ``make-sockaddr::pointer_t <family::int> <address::string> <port::int>``
     :Description: Creates the sockaddr stucture necessary 
                   for binding and using sockets. This is difficult to do in pure pure
                   so a c wrapper was created.
                   <family::int> is one of the address family constants. 
                   Address family constants are prefixed by AF.
                   <address::string> is a string represention of a IP address.
                   for server sockets this will be the IP address of the interface
                   you wish to bind to. To bind to all interfaces use ''*''
                   <port::int> is the port number to be used

                   The return value is an pointer to the sock_addr_in structure 

     :See Also: socket(2) */
extern void * pure_sockaddr (int family, char *address_str, int port)=make_sockaddr;

sockaddr family::int addr_str::string port::int = sentry free addr if ~null addr
when addr = pure_socket family addr_str port end;

/*   :Name: `` bind_socket`` - binds socket
     :Synopsis: ``bind_socket::pointer_t <sockfd::int> <address::pointer to sockaddr>``
     :Description: Binds socket to sockaddr sturcture
                   for binding and using sockets.
                   <sockfd::int> file descriptor returned from socket
                   <address::pointer to sockaddr> pointer returned from make sockaddr.
                   
                   The return value is an int success in indicated by a non negative result.

     :See Also: socket(2) bind(2) */
extern int pure_bind(int sockfd, void *address)=bind_socket;

extern int pure_connect(int sockfd, void *address)=connect_socket;

/*   :Name: `` accept_socket`` - accepts connections
     :Synopsis: ``accept_socket::int <sockfd::int> <address::pointer to sockaddr>``
     :Description: Accepts connction requests on socket bound to sockfd
                   
                   <sockfd::int> file descriptor returned from socket
                   <address::pointer to sockaddr> pointer returned from make sockaddr.
                   
                   The return value is on success a file descriptor for the connection.
                   On failure the value will be -1.

     :See Also: accept(2)  */
extern int pure_accept( int sockfd, void * address)=accept_socket;

/*   :Name: `` fdopen`` - open a FILE object for a file descriptor
     :Synopsis: ``fdopen::int <sockfd::int> <modes:string>``
     :Description: While not posix, included to be able to using existing IO functions
                   on socket file descriptors. FOr the most part mode should be "r+"
                   
                   The return value on success is a pointer to a FILE structure 
                   otherwise a NULL is returned.

     :See Also: fdopen(2)  */
extern FILE *fdopen (int fd, char *modes);
//extern int write_string(int fd, char *buf)=pure_;
//extern char *read_string(int fd,int len);