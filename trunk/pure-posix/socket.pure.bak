namespace posix;
namespace posix::socket;
/* /usr/include/sys/socket.h: */
using ffi;
const LITTLE_ENDIAN = 1234;
const BIG_ENDIAN = 4321;
const PDP_ENDIAN = 3412;
const BYTE_ORDER = 1234;
const FD_SETSIZE = 1024;
const NFDBITS = 8;
const UIO_MAXIOV = 1024;
const PF_UNSPEC = 0;
const PF_LOCAL = 1;
const PF_UNIX = 1;
const PF_FILE = 1;
const PF_INET = 2;
const PF_AX25 = 3;
const PF_IPX = 4;
const PF_APPLETALK = 5;
const PF_NETROM = 6;
const PF_BRIDGE = 7;
const PF_ATMPVC = 8;
const PF_X25 = 9;
const PF_INET6 = 10;
const PF_ROSE = 11;
const PF_DECnet = 12;
const PF_NETBEUI = 13;
const PF_SECURITY = 14;
const PF_KEY = 15;
const PF_NETLINK = 16;
const PF_ROUTE = 16;
const PF_PACKET = 17;
const PF_ASH = 18;
const PF_ECONET = 19;
const PF_ATMSVC = 20;
const PF_RDS = 21;
const PF_SNA = 22;
const PF_IRDA = 23;
const PF_PPPOX = 24;
const PF_WANPIPE = 25;
const PF_LLC = 26;
const PF_CAN = 29;
const PF_TIPC = 30;
const PF_BLUETOOTH = 31;
const PF_IUCV = 32;
const PF_RXRPC = 33;
const PF_ISDN = 34;
const PF_PHONET = 35;
const PF_MAX = 36;
const AF_UNSPEC = 0;
const AF_LOCAL = 1;
const AF_UNIX = 1;
const AF_FILE = 1;
const AF_INET = 2;
const AF_AX25 = 3;
const AF_IPX = 4;
const AF_APPLETALK = 5;
const AF_NETROM = 6;
const AF_BRIDGE = 7;
const AF_ATMPVC = 8;
const AF_X25 = 9;
const AF_INET6 = 10;
const AF_ROSE = 11;
const AF_DECnet = 12;
const AF_NETBEUI = 13;
const AF_SECURITY = 14;
const AF_KEY = 15;
const AF_NETLINK = 16;
const AF_ROUTE = 16;
const AF_PACKET = 17;
const AF_ASH = 18;
const AF_ECONET = 19;
const AF_ATMSVC = 20;
const AF_RDS = 21;
const AF_SNA = 22;
const AF_IRDA = 23;
const AF_PPPOX = 24;
const AF_WANPIPE = 25;
const AF_LLC = 26;
const AF_CAN = 29;
const AF_TIPC = 30;
const AF_BLUETOOTH = 31;
const AF_IUCV = 32;
const AF_RXRPC = 33;
const AF_ISDN = 34;
const AF_PHONET = 35;
const AF_MAX = 36;
const SOL_RAW = 255;
const SOL_DECNET = 261;
const SOL_X25 = 262;
const SOL_PACKET = 263;
const SOL_ATM = 264;
const SOL_AAL = 265;
const SOL_IRDA = 266;
const SOMAXCONN = 128;
const FIOSETOWN = 35073;
const SIOCSPGRP = 35074;
const FIOGETOWN = 35075;
const SIOCGPGRP = 35076;
const SIOCATMARK = 35077;
const SIOCGSTAMP = 35078;
const SIOCGSTAMPNS = 35079;
const SOL_SOCKET = 1;
const SO_DEBUG = 1;
const SO_REUSEADDR = 2;
const SO_TYPE = 3;
const SO_ERROR = 4;
const SO_DONTROUTE = 5;
const SO_BROADCAST = 6;
const SO_SNDBUF = 7;
const SO_RCVBUF = 8;
const SO_SNDBUFFORCE = 32;
const SO_RCVBUFFORCE = 33;
const SO_KEEPALIVE = 9;
const SO_OOBINLINE = 10;
const SO_NO_CHECK = 11;
const SO_PRIORITY = 12;
const SO_LINGER = 13;
const SO_BSDCOMPAT = 14;
const SO_PASSCRED = 16;
const SO_PEERCRED = 17;
const SO_RCVLOWAT = 18;
const SO_SNDLOWAT = 19;
const SO_RCVTIMEO = 20;
const SO_SNDTIMEO = 21;
const SO_SECURITY_AUTHENTICATION = 22;
const SO_SECURITY_ENCRYPTION_TRANSPORT = 23;
const SO_SECURITY_ENCRYPTION_NETWORK = 24;
const SO_BINDTODEVICE = 25;
const SO_ATTACH_FILTER = 26;
const SO_DETACH_FILTER = 27;
const SO_PEERNAME = 28;
const SO_TIMESTAMP = 29;
const SCM_TIMESTAMP = 29;
const SO_ACCEPTCONN = 30;
const SO_PEERSEC = 31;
const SO_PASSSEC = 34;
const SO_TIMESTAMPNS = 35;
const SCM_TIMESTAMPNS = 35;
const SO_MARK = 36;
const SO_TIMESTAMPING = 37;
const SCM_TIMESTAMPING = 37;
extern int select(int, fd_set*, fd_set*, fd_set*, void/*struct timeval*/*);
extern int pselect(int, fd_set*, fd_set*, fd_set*, void/*struct timespec*/*, __sigset_t*);
extern int gnu_dev_major(int64);
extern int gnu_dev_minor(int64);
extern int64 gnu_dev_makedev(int, int);
extern int readv(int, void/*struct iovec*/*, int);
extern int writev(int, void/*struct iovec*/*, int);
extern int preadv(int, void/*struct iovec*/*, int, long);
extern int pwritev(int, void/*struct iovec*/*, int, long);
extern int socket(int, int, int);
extern int socketpair(int, int, int, int*);
extern int bind(int, void/*struct sockaddr*/*, int);
extern int getsockname(int, void/*struct sockaddr*/*, int*);
extern int connect(int, void/*struct sockaddr*/*, int);
extern int getpeername(int, void/*struct sockaddr*/*, int*);
extern int send(int, void*, int, int);
extern int recv(int, void*, int, int);
extern int sendto(int, void*, int, int, void/*struct sockaddr*/*, int);
extern int recvfrom(int, void*, int, int, void/*struct sockaddr*/*, int*);
extern int sendmsg(int, void/*struct msghdr*/*, int);
extern int recvmsg(int, void/*struct msghdr*/*, int);
extern int getsockopt(int, int, int, void*, int*);
extern int setsockopt(int, int, int, void*, int);
extern int listen(int, int);
extern int accept(int, void/*struct sockaddr*/*, int*);
extern int shutdown(int, int);
extern int sockatmark(int);
extern int isfdtype(int, int);
let sockaddr_in =  struct_t (
			     sint_t, //sin_family  must be AF_INET 
			     sint_t, //sin_port,
			     pointer_t, //sin_addr,
			     string_t //sin_zero  Not used, must be zero 
	 );
/*
typedef uint32_t in_addr_t;
struct in_addr
  {
    in_addr_t s_addr;
  };
*/
let in_addr =  struct_t (uint32_t);
/*
struct sockaddr_in
{
  short   sin_family; // must be AF_INET
  u_short sin_port;
  struct  in_addr sin_addr;
  char    sin_zero[8]; // Not used, must be zero
};
*/
let sockaddr_in =  struct_t (
			     sint_t, //sin_family  must be AF_INET 
			     sint_t, //sin_port,
			     pointer_t, //sin_addr,
			     string_t //sin_zero  Not used, must be zero 
	 );